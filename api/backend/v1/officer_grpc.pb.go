// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: backend/v1/officer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfficerClient is the client API for Officer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficerClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRep, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRep, error)
}

type officerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficerClient(cc grpc.ClientConnInterface) OfficerClient {
	return &officerClient{cc}
}

func (c *officerClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/backend.v1.Officer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officerClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRep, error) {
	out := new(LoginRep)
	err := c.cc.Invoke(ctx, "/backend.v1.Officer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officerClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/backend.v1.Officer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officerClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRep, error) {
	out := new(ListRep)
	err := c.cc.Invoke(ctx, "/backend.v1.Officer/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficerServer is the server API for Officer service.
// All implementations must embed UnimplementedOfficerServer
// for forward compatibility
type OfficerServer interface {
	Create(context.Context, *CreateReq) (*emptypb.Empty, error)
	Login(context.Context, *LoginReq) (*LoginRep, error)
	Update(context.Context, *UpdateReq) (*emptypb.Empty, error)
	List(context.Context, *ListReq) (*ListRep, error)
	mustEmbedUnimplementedOfficerServer()
}

// UnimplementedOfficerServer must be embedded to have forward compatible implementations.
type UnimplementedOfficerServer struct {
}

func (UnimplementedOfficerServer) Create(context.Context, *CreateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOfficerServer) Login(context.Context, *LoginReq) (*LoginRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedOfficerServer) Update(context.Context, *UpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOfficerServer) List(context.Context, *ListReq) (*ListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOfficerServer) mustEmbedUnimplementedOfficerServer() {}

// UnsafeOfficerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficerServer will
// result in compilation errors.
type UnsafeOfficerServer interface {
	mustEmbedUnimplementedOfficerServer()
}

func RegisterOfficerServer(s grpc.ServiceRegistrar, srv OfficerServer) {
	s.RegisterService(&Officer_ServiceDesc, srv)
}

func _Officer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.v1.Officer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Officer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.v1.Officer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficerServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Officer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.v1.Officer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficerServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Officer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.v1.Officer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficerServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Officer_ServiceDesc is the grpc.ServiceDesc for Officer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Officer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.v1.Officer",
	HandlerType: (*OfficerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Officer_Create_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Officer_Login_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Officer_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Officer_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/v1/officer.proto",
}
